#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# Copyright (c) 2024 Thiago Alves
# SPDX-License-Identifier: MIT
#-------------------------------------------------------------------------------

# shellcheck source=_zmk_lib.sh
. "${BASH_SOURCE[0]%/*}/_zmk_lib.sh"

help() {
cat << EOF
ZMK Build
---------
The ZMK Build is an utility that can build the ZMK firmware for all keyboards
configured in your project.

This command will use the GitHub Action file 'build.yaml', located at the root
of your project, to collect all the configuration needed to build the firmwares.

Each keyboard available must have a '.keymap' file defined in the 'config'
directory, and one or more entries for it in the 'build.yaml' file. Refer to the
official ZMK documentation on how to configure all that.

EOF
usage
}

usage() {
cat << EOF
Usage: zmk build [options] <keyboard filter>|all

  <keyboard filter>               Each build defined in the build.yaml file is
                                  represented by a label given by the following:
                                  <UF2> (<board>, <shield>, <keymap>, <configs>)
                                  The filter can be any number of words that can
                                  narrow which firmwares to build. Each word on
                                  the filter works as an accumulative filter,
                                  meaning that if you pass more words, you get
                                  less results.

  all                             Build all firmwares defined in the
                                  'build.yaml' file.

  options:
    -c, --clean                   Remove intermediary and final artifacts
                                  generated during a build for the selected
                                  keyboard.
    -h, --help                    Show the 'zmk build' help.
    -i, --interactive             Allow you to choose what to build when nothing
                                  is provided. This option uses FZF with
                                  multi-selection enabled.
    -l, --left                    Build only the left-side of a split
                                  keyboard. If neither '--left' nor '--right' is
                                  passed, the 'zmk build' command will build
                                  both on split keyboard.
    -p, --pristine                Run a 'west' build with the 'pristine' flag.
    -r, --right                   Build only the right-side of a split
                                  keyboard. If neither '--left' nor '--right' is
                                  passed, the 'zmk build' command will build
                                  both on split keyboard.
    -s, --settings-reset          Build the 'settings-reset' firmware for the
                                  board configured on the given <keyboard>.
                                  Cannot be used with 'all' as keyboard.
EOF
}

# Given a Keyboard Name and a Shield, returns a string for the build directory
# of the given shield of the given keyboard.
build_dir() {
  local KEYBOARD="$1"
  local KB_SHIELD="$2"
  local SUFFIX=''
  if [[ "$KEYBOARD" != "$KB_SHIELD" ]]; then
    case "$KB_SHIELD" in
      *_left) SUFFIX='-left' ;;
      *_right) SUFFIX='-right' ;;
      *_reset) SUFFIX='-reset' ;;
    esac
  fi
  printf "%s%s" "$KEYBOARD" "$SUFFIX" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '-'
}

build() {
  local KEYBOARD="$1"
  local BOARD="$2"
  local MAIN_SHIELD="$3"
  local EXTRA_SHIELDS
  if [[ "$4" = "-" ]]; then
    EXTRA_SHIELDS=""
  else
    EXTRA_SHIELDS=" $4"
  fi
  local -a CMAKE_FLAGS
  if [[ "$5" = '-' ]]; then
    CMAKE_FLAGS=()
  else
    read -r -a CMAKE_FLAGS < <(echo -n "$5")
  fi
  local PRISTINE_FLAG
  if [[ "$PRISTINE" = "y" ]]; then
    PRISTINE_FLAG="-p"
  fi
  local BUILD_NAME
  if [[ "$KEYBOARD" = "$MAIN_SHIELD" ]]; then
    BUILD_NAME="${MAIN_SHIELD}"
  else
    BUILD_NAME="${KEYBOARD} (${MAIN_SHIELD})"
  fi
  local BUILD_DIR
  BUILD_DIR="$WEST_ROOT/build/intermediate/$(build_dir "${KEYBOARD}" "$MAIN_SHIELD")"

  echo "Building firmware: $BUILD_NAME"
  echo "-------------------$(echo -n "$BUILD_NAME" |  tr '[:print:]' '-')"

  local ZEPHYR_DIR
  ZEPHYR_DIR="$(west list -f '{name}|{abspath}' | grep -F 'zephyr|' | cut -d'|' -f2)"
  local ZMK_DIR
  ZMK_DIR="$(west list -f '{name}|{abspath}' | grep -F 'zmk|' | cut -d'|' -f2)"

  if [[ -z "$PRISTINE_FLAG" ]]\
    && [[ -f "$BUILD_DIR/zephyr/zmk.uf2" ]]; then
      west build -d "$BUILD_DIR" \
        || fail "The firmware for the keyboard '$KEYBOARD', shield '$MAIN_SHIELD', failed to build. Check the logs above."
    else
      west build $PRISTINE_FLAG -s "$ZMK_DIR/app" \
        -d "$BUILD_DIR" \
        -b "$BOARD" \
        -- -DZephyr_DIR="$ZEPHYR_DIR/share/zephyr-package/cmake" \
          -DSHIELD="${MAIN_SHIELD}${EXTRA_SHIELDS}" \
          -DZMK_CONFIG="$WEST_ROOT/config" \
          "${CMAKE_FLAGS[@]}" \
        || fail "The firmware for the keyboard '$KEYBOARD', shield '$MAIN_SHIELD', failed to build. Check the logs above."
  fi
  echo
}

store() {
  local KEYBOARD="$1"
  local MAIN_SHIELD="$2"
  local ARTIFACT_FILE_NAME="$3"

  local BUILD_DIR
  BUILD_DIR="$WEST_ROOT/build/intermediate/$(build_dir "${KEYBOARD}" "$MAIN_SHIELD")"

  if [[ ! -d "$WEST_ROOT/build/out" ]]; then
    mkdir -p "$WEST_ROOT/build/out" \
      || fail "Failed to create the firmware output directory"
  fi

  cp -f \
    "$BUILD_DIR/zephyr/zmk.uf2" \
    "$WEST_ROOT/build/out/$ARTIFACT_FILE_NAME.uf2" \
    || fail "Failed to copy the keyboard '$KEYBOARD', shield '$MAIN_SHIELD', firmware to the output directory"

  echo "Firmware of keyboard '$KEYBOARD', shield '$MAIN_SHIELD', located at 'build/out/$ARTIFACT_FILE_NAME.uf2'"
  echo
}

clean() {
  echo "Cleaning artifacts of shield: $1"
  echo "------------------------------$(echo -n "$1" |  tr '[:print:]' '-')"

  local KEYBOARD="$1"
  local MAIN_SHIELD="$2"
  local ARTIFACT_FILE_NAME="$3"
  local INTERMEDIARY_DIR
  local ARTIFACT_FILE="$WEST_ROOT/build/out/$ARTIFACT_FILE_NAME.uf2"
  INTERMEDIARY_DIR="$WEST_ROOT/build/intermediate/$(build_dir "${KEYBOARD}" "$MAIN_SHIELD")"

  if [[ -d "$INTERMEDIARY_DIR" ]]; then
    rm -rf "$INTERMEDIARY_DIR" \
      || fail "Failed to remove the build output for the '$MAIN_SHIELD' shield"
  fi

  if [[ -f "$ARTIFACT_FILE" ]]; then
    rm -rf "$ARTIFACT_FILE" \
      || fail "Failed to remove the output firmware for the '$MAIN_SHIELD' shield"
  fi
}

pack_artifacts() {
  local PACKAGE_NAME="$1"
  shift
  local -a ARTIFACTS
  local ARTIFACT
  for ARTIFACT in "$@"; do
    ARTIFACTS+=("$WEST_ROOT/build/out/${ARTIFACT}.uf2")
  done

  if [[ ! -d "$WEST_ROOT/build/pkgs" ]]; then
    mkdir -p "$WEST_ROOT/build/pkgs"
  fi

  zip -9 -j "$WEST_ROOT/build/pkgs/${PACKAGE_NAME}".zip "${ARTIFACTS[@]}"
}

pack() {
  local LAST_KB="${ZMK_KEYBOARDS[0]}"
  local -a PACK_ARTIFACTS
  for idx in "${!ZMK_BOARDS[@]}"; do
    if [[ "${ZMK_KEYBOARDS[$idx]}" = "$LAST_KB" ]]; then
      PACK_ARTIFACTS+=("${ZMK_ARTIFACTS[$idx]}")
    else
      PACK_NAME="$(printf "%s\n" "${PACK_ARTIFACTS[@]}" | sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}')"
      pack_artifacts "${PACK_NAME%*-}" "${PACK_ARTIFACTS[@]}"
      PACK_ARTIFACTS=("${ZMK_ARTIFACTS[$idx]}")
      LAST_KB="${ZMK_KEYBOARDS[$idx]}"
    fi
  done
  PACK_NAME="$(printf "%s\n" "${PACK_ARTIFACTS[@]}" | sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}')"
  pack_artifacts "${PACK_NAME%*-}" "${PACK_ARTIFACTS[@]}"
}

WEST_ROOT="$(require_west_project)"
ACTION="build"
BUILD_SPLIT=""
FIRMWARE_TYPE="default"
INTERACTIVE="n"
PRISTINE="n"

declare -a KEYBOARD_IDS

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      help
      exit 0
      ;;
    -c|--clean)
      ACTION="clean"
      ;;
    -s|--settings-reset)
      FIRMWARE_TYPE="reset"
      ;;
    -p|--pristine)
      PRISTINE="y"
      ;;
    -l|--left)
      if [[ -z "$BUILD_SPLIT" ]]; then
        BUILD_SPLIT="left"
      elif [[ "$BUILD_SPLIT" = "right" ]]; then
        BUILD_SPLIT="both"
      fi
      ;;
    -r|--right)
      if [[ -z "$BUILD_SPLIT" ]]; then
        BUILD_SPLIT="right"
      elif [[ "$BUILD_SPLIT" = "left" ]]; then
        BUILD_SPLIT="both"
      fi
      ;;
    -i|--interactive)
      INTERACTIVE="y"
      ;;
    *)
      KEYBOARD_IDS+=("$1")
      ;;
  esac
  shift
done

extract_all_build_config
filter_build_configs "$BUILD_SPLIT" "${KEYBOARD_IDS[@]}"
if [[ "${#ZMK_BOARDS[@]}" -eq 0 ]] && [[ "$INTERACTIVE" = "y" ]]; then
  filter_build_configs_interactively "$BUILD_SPLIT"
fi

if [[ "${#ZMK_BOARDS[@]}" -eq 0 ]]; then
  if [[ "${#KEYBOARD_IDS[@]}" -eq 0 ]]; then
    usage_fail "You need to pass a filter for your builds or 'all' to build all firmwares"
  else
    usage_fail "Could not find a build configuration for the given identifiers: ${KEYBOARD_IDS[*]}"
  fi
fi

echo "Building the following firmwares"
echo "================================"
for f in "${ZMK_ARTIFACTS[@]}"; do
  echo " - $f.uf2"
done
echo

if [[ "$ACTION" = "build" ]]; then
  echo "ZMK Firmware Build"
  echo "=================="

  for idx in "${!ZMK_BOARDS[@]}"; do
    echo
    if [[ "$FIRMWARE_TYPE" = "reset" ]]; then
      build "${ZMK_KEYBOARDS[$idx]}" "${ZMK_BOARDS[$idx]}" "settings_reset"
      store "${ZMK_KEYBOARDS[$idx]}" "settings_reset" "$(artifact_name "${ZMK_SHIELDS[$idx]}")-settings-reset"
    else
      build "${ZMK_KEYBOARDS[$idx]}" \
            "${ZMK_BOARDS[$idx]}" \
            "${ZMK_SHIELDS[$idx]}" \
            "${ZMK_EXTRA_SHIELDS[$idx]}" \
            "${ZMK_CMAKE_ARGS[$idx]}"
      store "${ZMK_KEYBOARDS[$idx]}" "${ZMK_SHIELDS[$idx]}" "${ZMK_ARTIFACTS[$idx]}"
    fi
  done
  pack
else
  echo "ZMK Firmware Artifacts Clean Up"
  echo "==============================="

  for idx in "${!ZMK_BOARDS[@]}"; do
    echo
    if [[ "$FIRMWARE_TYPE" = "reset" ]]; then
      clean "${ZMK_KEYBOARDS[$idx]}" "settings_reset" "$(artifact_name "${ZMK_SHIELDS[$idx]}")-settings-reset"
    else
      clean "${ZMK_KEYBOARDS[$idx]}" "${ZMK_SHIELDS[$idx]}" "${ZMK_ARTIFACTS[$idx]}"
    fi
  done
fi
